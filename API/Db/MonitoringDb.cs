// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Data;
using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using YALM.API.Db.Models;

#pragma warning disable 1573, 1591
#nullable enable

namespace DataModel
{
	public partial class MonitoringDb : DataConnection, IDb
	{
		public MonitoringDb()
		{
			InitDataContext();
		}

		public MonitoringDb(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		public MonitoringDb(DataOptions<MonitoringDb> options)
			: base(options.Options)
		{
			InitDataContext();
		}

		partial void InitDataContext();

		public ITable<CpuDbRecord>           Cpus            => this.GetTable<CpuDbRecord>();
		public ITable<CpuLogDbRecord>        CpuLogs         => this.GetTable<CpuLogDbRecord>();
		public ITable<DiskDbRecord>          Disks           => this.GetTable<DiskDbRecord>();
		public ITable<MemoryLogDbRecord>     MemoryLogs      => this.GetTable<MemoryLogDbRecord>();
		public ITable<PartitionDbRecord>     Partitions      => this.GetTable<PartitionDbRecord>();
		public ITable<PartitionLogDbRecord>  PartitionLogs   => this.GetTable<PartitionLogDbRecord>();
		public ITable<ProgramLogDbRecord>    ProgramLogs     => this.GetTable<ProgramLogDbRecord>();
		public ITable<ServiceDbRecord>       Services        => this.GetTable<ServiceDbRecord>();
		public ITable<ServiceLogDbRecord>    ServiceLogs     => this.GetTable<ServiceLogDbRecord>();
		public ITable<ServicenameDbRecord>   ServiceNames    => this.GetTable<ServicenameDbRecord>();
		public ITable<ServicestatusDbRecord> ServiceStatuses => this.GetTable<ServicestatusDbRecord>();
	}

	public static partial class ExtensionMethods
	{
		#region Table Extensions
		public static CpuDbRecord? Find(this ITable<CpuDbRecord> table, int serverid)
		{
			return table.FirstOrDefault(e => e.ServerId == serverid);
		}

		public static Task<CpuDbRecord?> FindAsync(this ITable<CpuDbRecord> table, int serverid, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.ServerId == serverid, cancellationToken);
		}

		public static CpuLogDbRecord? Find(this ITable<CpuLogDbRecord> table, int serverid, DateTime date)
		{
			return table.FirstOrDefault(e => e.ServerId == serverid && e.Date == date);
		}

		public static Task<CpuLogDbRecord?> FindAsync(this ITable<CpuLogDbRecord> table, int serverid, DateTime date, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.ServerId == serverid && e.Date == date, cancellationToken);
		}

		public static DiskDbRecord? Find(this ITable<DiskDbRecord> table, int serverid, string uuid)
		{
			return table.FirstOrDefault(e => e.ServerId == serverid && e.Uuid.CompareTo(uuid) == 0);
		}

		public static Task<DiskDbRecord?> FindAsync(this ITable<DiskDbRecord> table, int serverid, string uuid, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.ServerId == serverid && e.Uuid.CompareTo(uuid) == 0, cancellationToken);
		}

		public static MemoryLogDbRecord? Find(this ITable<MemoryLogDbRecord> table, int serverid, DateTime date)
		{
			return table.FirstOrDefault(e => e.ServerId == serverid && e.Date == date);
		}

		public static Task<MemoryLogDbRecord?> FindAsync(this ITable<MemoryLogDbRecord> table, int serverid, DateTime date, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.ServerId == serverid && e.Date == date, cancellationToken);
		}

		public static PartitionDbRecord? Find(this ITable<PartitionDbRecord> table, int serverid, string uuid)
		{
			return table.FirstOrDefault(e => e.Serverid == serverid && e.Uuid == uuid);
		}

		public static Task<PartitionDbRecord?> FindAsync(this ITable<PartitionDbRecord> table, int serverid, string uuid, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Serverid == serverid && e.Uuid == uuid, cancellationToken);
		}

		public static PartitionLogDbRecord? Find(this ITable<PartitionLogDbRecord> table, int serverid, string partitionuuid, DateTime date)
		{
			return table.FirstOrDefault(e => e.Serverid == serverid && e.Partitionuuid == partitionuuid && e.Date == date);
		}

		public static Task<PartitionLogDbRecord?> FindAsync(this ITable<PartitionLogDbRecord> table, int serverid, string partitionuuid, DateTime date, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Serverid == serverid && e.Partitionuuid == partitionuuid && e.Date == date, cancellationToken);
		}

		public static ServiceDbRecord? Find(this ITable<ServiceDbRecord> table, int serverid, int serviceid, DateTime date)
		{
			return table.FirstOrDefault(e => e.ServerId == serverid && e.ServiceId == serviceid && e.Date == date);
		}

		public static Task<ServiceDbRecord?> FindAsync(this ITable<ServiceDbRecord> table, int serverid, int serviceid, DateTime date, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.ServerId == serverid && e.ServiceId == serviceid && e.Date == date, cancellationToken);
		}

		public static ServiceLogDbRecord? Find(this ITable<ServiceLogDbRecord> table, int serverid, int serviceid, DateTime date, string messagetext)
		{
			return table.FirstOrDefault(e => e.Serverid == serverid && e.Serviceid == serviceid && e.Date == date && e.Messagetext == messagetext);
		}

		public static Task<ServiceLogDbRecord?> FindAsync(this ITable<ServiceLogDbRecord> table, int serverid, int serviceid, DateTime date, string messagetext, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Serverid == serverid && e.Serviceid == serviceid && e.Date == date && e.Messagetext == messagetext, cancellationToken);
		}

		public static ServicenameDbRecord? Find(this ITable<ServicenameDbRecord> table, int serviceid)
		{
			return table.FirstOrDefault(e => e.ServiceId == serviceid);
		}

		public static Task<ServicenameDbRecord?> FindAsync(this ITable<ServicenameDbRecord> table, int serviceid, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.ServiceId == serviceid, cancellationToken);
		}

		public static ServicestatusDbRecord? Find(this ITable<ServicestatusDbRecord> table, int statusid)
		{
			return table.FirstOrDefault(e => e.StatusId == statusid);
		}

		public static Task<ServicestatusDbRecord?> FindAsync(this ITable<ServicestatusDbRecord> table, int statusid, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.StatusId == statusid, cancellationToken);
		}
		#endregion
	}
}
