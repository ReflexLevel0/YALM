// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB.Mapping;
using System.Collections.Generic;
using YALM.Common.Models.Graphql.OutputModels;

#pragma warning disable 1573, 1591
#nullable enable

namespace DataModel
{
	[Table("partition")]
	public class PartitionDbRecord : IConvertible
	{
		[Column("diskuuid"                                                                            )] public string? Diskuuid          { get; set; } // character varying(256)
		[Column("uuid"             , CanBeNull    = false, IsPrimaryKey    = true, PrimaryKeyOrder = 0)] public string  Uuid              { get; set; } = null!; // character varying(64)
		[Column("serverid"         , IsPrimaryKey = true , PrimaryKeyOrder = 1                        )] public int     Serverid          { get; set; } // integer
		[Column("filesystemname"                                                                      )] public string? FilesystemName    { get; set; } // character varying(64)
		[Column("filesystemversion"                                                                   )] public string? FilesystemVersion { get; set; } // character varying(64)
		[Column("label"                                                                               )] public string? Label             { get; set; } // character varying(256)
		[Column("mountpath"                                                                           )] public string? MountPath         { get; set; } // character varying(1024)

		#region Associations
		/// <summary>
		/// partition_diskuuid_serverid_fkey
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(Diskuuid) + "," + nameof(Serverid), OtherKey = nameof(DiskDbRecord.Uuid) + "," + nameof(DiskDbRecord.ServerId))]
		public DiskDbRecord Diskuuidserveridfkey { get; set; } = null!;

		/// <summary>
		/// partitionlog_serverid_partitionuuid_fkey backreference
		/// </summary>
		[Association(ThisKey = nameof(Serverid) + "," + nameof(Uuid), OtherKey = nameof(PartitionLogDbRecord.Serverid) + "," + nameof(PartitionLogDbRecord.Partitionuuid))]
		public IEnumerable<PartitionLogDbRecord> Partitionlogs { get; set; } = null!;
		#endregion

		public TypeCode GetTypeCode()
		{
			throw new NotImplementedException();
		}

		public bool ToBoolean(IFormatProvider? provider)
		{
			throw new NotImplementedException();
		}

		public byte ToByte(IFormatProvider? provider)
		{
			throw new NotImplementedException();
		}

		public char ToChar(IFormatProvider? provider)
		{
			throw new NotImplementedException();
		}

		public DateTime ToDateTime(IFormatProvider? provider)
		{
			throw new NotImplementedException();
		}

		public decimal ToDecimal(IFormatProvider? provider)
		{
			throw new NotImplementedException();
		}

		public double ToDouble(IFormatProvider? provider)
		{
			throw new NotImplementedException();
		}

		public short ToInt16(IFormatProvider? provider)
		{
			throw new NotImplementedException();
		}

		public int ToInt32(IFormatProvider? provider)
		{
			throw new NotImplementedException();
		}

		public long ToInt64(IFormatProvider? provider)
		{
			throw new NotImplementedException();
		}

		public sbyte ToSByte(IFormatProvider? provider)
		{
			throw new NotImplementedException();
		}

		public float ToSingle(IFormatProvider? provider)
		{
			throw new NotImplementedException();
		}

		public string ToString(IFormatProvider? provider)
		{
			throw new NotImplementedException();
		}

		public object ToType(Type conversionType, IFormatProvider? provider)
		{
			if (conversionType != typeof(PartitionOutputBase) && conversionType != typeof(PartitionOutput))
			{
				throw new NotImplementedException();
			}
			return new PartitionOutput(Serverid, Uuid, FilesystemName, FilesystemVersion, Label, MountPath);
		}

		public ushort ToUInt16(IFormatProvider? provider)
		{
			throw new NotImplementedException();
		}

		public uint ToUInt32(IFormatProvider? provider)
		{
			throw new NotImplementedException();
		}

		public ulong ToUInt64(IFormatProvider? provider)
		{
			throw new NotImplementedException();
		}
	}
}
