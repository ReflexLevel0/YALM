// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB.Mapping;
using System;
using YALM.API.Models.Db;
using YALM.Common.Models;
using YALM.Common.Models.Graphql.Logs;

#pragma warning disable 1573, 1591
#nullable enable

namespace DataModel
{
	[Table("memorylog")]
	public class MemoryLogDbRecord : ILog, IConvertible
	{
		[Column("serverid"      , IsPrimaryKey = true, PrimaryKeyOrder = 0)] public int      ServerId       { get; set; } // integer
		[Column("date"          , IsPrimaryKey = true, PrimaryKeyOrder = 1)] public DateTime Date           { get; set; } // timestamp (6) without time zone
		[Column("interval"                                                )] public int      Interval       { get; set; } // integer
		[Column("totalkb")] public long? TotalKb { get; set; } // bigint
		[Column("freekb")] public long? FreeKb { get; set; } // bigint
		[Column("usedkb")] public long? UsedKb { get; set; } // bigint
		[Column("swaptotalkb")] public long? SwapTotalKb { get; set; } // bigint
		[Column("swapfreekb")] public long? SwapFreeKb { get; set; } // bigint
		[Column("swapusedkb")] public long? SwapUsedKb { get; set; } // bigint
		[Column("cachedkb")] public long? CachedKb { get; set; } // bigint
		[Column("availablekb")] public long? AvailableKb { get; set; } // bigint

		public TypeCode GetTypeCode()
		{
			throw new NotImplementedException();
		}

		public bool ToBoolean(IFormatProvider? provider)
		{
			throw new NotImplementedException();
		}

		public byte ToByte(IFormatProvider? provider)
		{
			throw new NotImplementedException();
		}

		public char ToChar(IFormatProvider? provider)
		{
			throw new NotImplementedException();
		}

		public DateTime ToDateTime(IFormatProvider? provider)
		{
			throw new NotImplementedException();
		}

		public decimal ToDecimal(IFormatProvider? provider)
		{
			throw new NotImplementedException();
		}

		public double ToDouble(IFormatProvider? provider)
		{
			throw new NotImplementedException();
		}

		public short ToInt16(IFormatProvider? provider)
		{
			throw new NotImplementedException();
		}

		public int ToInt32(IFormatProvider? provider)
		{
			throw new NotImplementedException();
		}

		public long ToInt64(IFormatProvider? provider)
		{
			throw new NotImplementedException();
		}

		public sbyte ToSByte(IFormatProvider? provider)
		{
			throw new NotImplementedException();
		}

		public float ToSingle(IFormatProvider? provider)
		{
			throw new NotImplementedException();
		}

		public string ToString(IFormatProvider? provider)
		{
			throw new NotImplementedException();
		}

		public object ToType(Type conversionType, IFormatProvider? provider)
		{
			if(conversionType != typeof(MemoryLog)) throw new NotImplementedException();
			return new MemoryLog
			{
				Date = Date,
				TotalKb = TotalKb,
				FreeKb = FreeKb,
				UsedKb = UsedKb,
				SwapTotalKb = SwapTotalKb,
				SwapFreeKb = SwapFreeKb,
				SwapUsedKb = SwapUsedKb,
				CachedKb = CachedKb,
				AvailableKb = AvailableKb 
			};
		}

		public ushort ToUInt16(IFormatProvider? provider)
		{
			throw new NotImplementedException();
		}

		public uint ToUInt32(IFormatProvider? provider)
		{
			throw new NotImplementedException();
		}

		public ulong ToUInt64(IFormatProvider? provider)
		{
			throw new NotImplementedException();
		}
	}
}
